@startuml arch_proyecto_alpha

class User {
    - int id
    - string nombre
    - string password

    + User(int id, string nombre, string password)
    + \~User()
    + int getId()
    + string getNombre()
    + string getHashPassword()
}

class UserManager {
    - int sizeUsers
    - int currentPosition
    - User[] users

    + UserManager()
    + \~UserManager()
    + bool newUser(string nombre, string password)
    + User getUser(int id)
    - void growUsers()
}

class WhackAMole {
    - int boardSize
    - vector<vector<int>> board
    - map<int, int> userPuntuation

    + WhackAMole(int boardSize)
    + void setBoardSize(int boardSize)
    + int getBoardSideSize()
    + string getBoard()
    + bool setNewUserPuntuation(int userId)
    + int getNewMolePosition()
    + bool setUserPuntuation(int userId)
}

class Referee{
    + {static} bool checkValidWhack(vector<vector<int>> board, int smash)
    + {static} int checkIfWin(map<int, int> usersPuntuation)
}

enum UpdateBoardType{
    DOWN
    UP
    WHACKED
}

class Player {
    - vector<vector<int>> board

    + Player(string name, string password)
    + bool setSmash(int positonOfSmash)
    + bool verifySmash(int positionOfSmash)
    + void updateBoard(UpdateBoardType updateType, int position)
}

class Game {
    - UserManager users
    - WhackAMole whackAMole

    + Game()
    + void newPlayer()
    + void setNewMole()
    + int defineWinner()
}

User "Is use by" --> UserManager 

Referee "Use" <-- UserManager
Player "Extends" <.. User
Player "Use" <-- UpdateBoardType
Game "Use" <-- UserManager
Game "Use" <-- Referee
Game "Use" <-- Player
Game "Use" <-- WhackAMole

@enduml
